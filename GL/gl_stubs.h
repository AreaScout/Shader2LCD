#pragma once

extern "C" {
#include <SDL2\SDL.h>
}


#if defined(WIN32)

#define LOAD_GL_FUNC(x, p) x =  reinterpret_cast<p>(SDL_GL_GetProcAddress(#x)); \
				if (x == nullptr) { MessageBox(NULL, #x, "Error Loading OpenGL ES function", MB_OK); return 0;}

typedef const GLubyte* (*PFNGLGETSTRINGPROC)(GLenum);

PFNGLACTIVETEXTUREPROC glActiveTexture;
PFNGLTEXIMAGE3DPROC glTexImage3D;
PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation;
PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray;
PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation;
PFNGLUNIFORM1IPROC glUniform1i;
PFNGLUNIFORM4FPROC glUniform4f;
PFNGLUNIFORM1FPROC glUniform1f;
PFNGLUNIFORM2FPROC glUniform2f;
PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog;
PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog;
PFNGLGETSHADERIVPROC glGetShaderiv;
PFNGLGETPROGRAMIVPROC glGetProgramiv;
PFNGLISPROGRAMPROC glIsProgram;
PFNGLISSHADERPROC glIsShader;
PFNGLCREATEPROGRAMPROC glCreateProgram;
PFNGLDELETEPROGRAMPROC glDeleteProgram;
PFNGLUSEPROGRAMPROC glUseProgram;
PFNGLATTACHSHADERPROC glAttachShader;
PFNGLDETACHSHADERPROC glDetachShader;
PFNGLLINKPROGRAMPROC glLinkProgram;
PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray;

PFNGLCREATESHADERPROC glCreateShader;
PFNGLDELETESHADERPROC glDeleteShader;
PFNGLSHADERSOURCEPROC glShaderSource;
PFNGLCOMPILESHADERPROC glCompileShader;

PFNGLGENBUFFERSPROC glGenBuffers;
PFNGLBINDBUFFERPROC glBindBuffer;
PFNGLBUFFERDATAPROC glBufferData;
PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer;
PFNGLDELETEBUFFERSPROC glDeleteBuffers;

PFNGLGENVERTEXARRAYSPROC glGenVertexArrays;
PFNGLBINDVERTEXARRAYPROC glBindVertexArray;
PFNGLDELETEVERTEXARRAYSPROC glDeleteVertexArrays;
PFNGLREADBUFFERNVPROC glReadBufferNV;

int loadOpenGLFunctions() {

	LOAD_GL_FUNC(glActiveTexture, PFNGLACTIVETEXTUREPROC);
	LOAD_GL_FUNC(glTexImage3D, PFNGLTEXIMAGE3DPROC);
	LOAD_GL_FUNC(glGetAttribLocation, PFNGLGETATTRIBLOCATIONPROC);
	LOAD_GL_FUNC(glDisableVertexAttribArray, PFNGLDISABLEVERTEXATTRIBARRAYPROC);
	LOAD_GL_FUNC(glGetUniformLocation, PFNGLGETUNIFORMLOCATIONPROC);
	LOAD_GL_FUNC(glUniform4f, PFNGLUNIFORM4FPROC);
	LOAD_GL_FUNC(glUniform1f, PFNGLUNIFORM1FPROC);
	LOAD_GL_FUNC(glUniform2f, PFNGLUNIFORM2FPROC);
	LOAD_GL_FUNC(glUniform1i, PFNGLUNIFORM1IPROC);
	LOAD_GL_FUNC(glGetProgramInfoLog, PFNGLGETPROGRAMINFOLOGPROC);
	LOAD_GL_FUNC(glGetShaderInfoLog, PFNGLGETSHADERINFOLOGPROC);
	LOAD_GL_FUNC(glGetProgramiv, PFNGLGETPROGRAMIVPROC);
	LOAD_GL_FUNC(glGetShaderiv, PFNGLGETSHADERIVPROC);
	LOAD_GL_FUNC(glIsShader, PFNGLISSHADERPROC);
	LOAD_GL_FUNC(glCreateProgram, PFNGLCREATEPROGRAMPROC);
	LOAD_GL_FUNC(glDeleteProgram, PFNGLDELETEPROGRAMPROC);
	LOAD_GL_FUNC(glUseProgram, PFNGLUSEPROGRAMPROC);
	LOAD_GL_FUNC(glAttachShader, PFNGLATTACHSHADERPROC);
	LOAD_GL_FUNC(glLinkProgram, PFNGLLINKPROGRAMPROC);
	LOAD_GL_FUNC(glEnableVertexAttribArray, PFNGLENABLEVERTEXATTRIBARRAYPROC);

	LOAD_GL_FUNC(glCreateShader, PFNGLCREATESHADERPROC);
	LOAD_GL_FUNC(glDeleteShader, PFNGLDELETESHADERPROC);
	LOAD_GL_FUNC(glShaderSource, PFNGLSHADERSOURCEPROC);
	LOAD_GL_FUNC(glCompileShader, PFNGLCOMPILESHADERPROC);

	LOAD_GL_FUNC(glGenBuffers, PFNGLGENBUFFERSPROC);
	LOAD_GL_FUNC(glBindBuffer, PFNGLBINDBUFFERPROC);
	LOAD_GL_FUNC(glBufferData, PFNGLBUFFERDATAPROC);
	LOAD_GL_FUNC(glVertexAttribPointer, PFNGLVERTEXATTRIBPOINTERPROC);
	LOAD_GL_FUNC(glDeleteBuffers, PFNGLDELETEBUFFERSPROC);

	LOAD_GL_FUNC(glGenVertexArrays, PFNGLGENVERTEXARRAYSPROC);
	LOAD_GL_FUNC(glBindVertexArray, PFNGLBINDVERTEXARRAYPROC);
	LOAD_GL_FUNC(glDeleteVertexArrays, PFNGLDELETEVERTEXARRAYSPROC);

	LOAD_GL_FUNC(glReadBufferNV, PFNGLREADBUFFERNVPROC);

	return 1;
}

#endif